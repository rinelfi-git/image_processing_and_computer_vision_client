/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emit.ipcv.guis;

import emit.ipcv.database.dao.TranslationDao;
import emit.ipcv.database.dao.entites.DBLanguage;
import emit.ipcv.engines.interfaces.observerPatterns.ObserverClass;
import emit.ipcv.utils.Const;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;

/**
 *
 * @author rinelfi
 */
public class AllOrNothingDialog extends javax.swing.JDialog {

  private JButton[][] elementBoutons;
  private int[][] structuringElement;
  private int buttonSize;
  private List<ObserverClass<int[][]>> structuringElementListeners;
  private Color formColor, backgroundColor, nothingColor;
  private TranslationDao translation;
  private DBLanguage language;

  /**
   * Creates new form AllOrNothingDialog
   */
  public AllOrNothingDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    buttonSize = 30;
    formColor = Color.BLACK;
    backgroundColor = Color.WHITE;
    nothingColor = Color.decode("#808080");
    initElements();
    loadButtons();
    structuringElementListeners = new ArrayList<>();
  }
  
  public AllOrNothingDialog setTranslation(TranslationDao translation) {
    this.translation = translation;
    return this;
  }

  public AllOrNothingDialog setLanguage(DBLanguage language) {
    this.language = language;
    return this;
  }
  
  public AllOrNothingDialog initLanguage() {
    setTitle(translation.get(language, "structuring_element").toString());
    formRadio.setText(translation.get(language, "form").toString());
    backgroundRadio.setText(translation.get(language, "background").toString());
    nothingRadio.setText(translation.get(language, "nothing").toString());
    applyButton.setText(translation.get(language, "apply").toString());
    return this;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    choixFond = new javax.swing.ButtonGroup();
    rootPanel = new javax.swing.JPanel();
    previewPanel = new javax.swing.JPanel();
    commandPanel = new javax.swing.JPanel();
    filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
    buttonPanel = new javax.swing.JPanel();
    interactionPanel = new javax.swing.JPanel();
    addButton = new javax.swing.JButton();
    deleteButton = new javax.swing.JButton();
    formRadio = new javax.swing.JRadioButton();
    nothingRadio = new javax.swing.JRadioButton();
    backgroundRadio = new javax.swing.JRadioButton();
    applyButton = new javax.swing.JButton();
    filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Element structurant");
    setMaximumSize(new java.awt.Dimension(415, 300));
    setMinimumSize(new java.awt.Dimension(415, 300));
    setResizable(false);

    rootPanel.setBackground(new java.awt.Color(255, 255, 255));
    rootPanel.setLayout(new java.awt.BorderLayout());

    previewPanel.setBackground(new java.awt.Color(79, 79, 79));
    previewPanel.setMaximumSize(new java.awt.Dimension(300, 300));
    previewPanel.setMinimumSize(new java.awt.Dimension(300, 300));
    previewPanel.setPreferredSize(new java.awt.Dimension(300, 300));
    previewPanel.setLayout(new java.awt.GridBagLayout());
    rootPanel.add(previewPanel, java.awt.BorderLayout.CENTER);

    commandPanel.setBackground(new java.awt.Color(255, 255, 255));
    commandPanel.setMaximumSize(new java.awt.Dimension(115, 120));
    commandPanel.setMinimumSize(new java.awt.Dimension(115, 120));
    commandPanel.setPreferredSize(new java.awt.Dimension(115, 120));
    commandPanel.setLayout(new java.awt.BorderLayout());
    commandPanel.add(filler1, java.awt.BorderLayout.NORTH);

    buttonPanel.setBackground(new java.awt.Color(255, 255, 255));
    buttonPanel.setMaximumSize(new java.awt.Dimension(190, 200));
    buttonPanel.setMinimumSize(new java.awt.Dimension(190, 200));
    buttonPanel.setPreferredSize(new java.awt.Dimension(190, 200));
    buttonPanel.setLayout(new java.awt.BorderLayout());

    interactionPanel.setBackground(new java.awt.Color(255, 255, 255));
    interactionPanel.setMaximumSize(new java.awt.Dimension(115, 170));
    interactionPanel.setMinimumSize(new java.awt.Dimension(115, 170));
    interactionPanel.setPreferredSize(new java.awt.Dimension(115, 170));
    interactionPanel.setLayout(new java.awt.GridBagLayout());

    addButton.setText("+");
    addButton.setMaximumSize(new java.awt.Dimension(45, 45));
    addButton.setMinimumSize(new java.awt.Dimension(45, 45));
    addButton.setPreferredSize(new java.awt.Dimension(45, 45));
    addButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    interactionPanel.add(addButton, gridBagConstraints);

    deleteButton.setText("-");
    deleteButton.setMaximumSize(new java.awt.Dimension(45, 45));
    deleteButton.setMinimumSize(new java.awt.Dimension(45, 45));
    deleteButton.setPreferredSize(new java.awt.Dimension(45, 45));
    deleteButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        deleteButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 6;
    gridBagConstraints.gridy = 29;
    gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
    interactionPanel.add(deleteButton, gridBagConstraints);

    choixFond.add(formRadio);
    formRadio.setSelected(true);
    formRadio.setText("Forme");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 30;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    interactionPanel.add(formRadio, gridBagConstraints);

    choixFond.add(nothingRadio);
    nothingRadio.setText("Rien");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 32;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    interactionPanel.add(nothingRadio, gridBagConstraints);

    choixFond.add(backgroundRadio);
    backgroundRadio.setText("Fond");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 31;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    interactionPanel.add(backgroundRadio, gridBagConstraints);

    buttonPanel.add(interactionPanel, java.awt.BorderLayout.NORTH);

    applyButton.setText("Appliquer");
    applyButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        applyButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(applyButton, java.awt.BorderLayout.SOUTH);

    commandPanel.add(buttonPanel, java.awt.BorderLayout.CENTER);
    commandPanel.add(filler2, java.awt.BorderLayout.SOUTH);

    rootPanel.add(commandPanel, java.awt.BorderLayout.EAST);

    getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>//GEN-END:initComponents

  private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    ajouterElement();
  }//GEN-LAST:event_addButtonActionPerformed

  private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
    enleverElement();
  }//GEN-LAST:event_deleteButtonActionPerformed

  private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
    int lines = elementBoutons.length,
      columns = elementBoutons[0].length;
    structuringElement = new int[lines][columns];
    for (int x = 0; x < lines; x++) {
      for (int y = 0; y < columns; y++) {
        if (elementBoutons[x][y].getBackground().equals(formColor)) {
          structuringElement[x][y] = 0;
        } else if (elementBoutons[x][y].getBackground().equals(backgroundColor)) {
          structuringElement[x][y] = 255;
        } else if (elementBoutons[x][y].getBackground().equals(nothingColor)) {
          structuringElement[x][y] = Const.NOTHING;
        }
      }
    }
    dispose();
    updateOrigineElement(structuringElement);
  }//GEN-LAST:event_applyButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JButton applyButton;
  private javax.swing.JRadioButton backgroundRadio;
  private javax.swing.JPanel buttonPanel;
  private javax.swing.ButtonGroup choixFond;
  private javax.swing.JPanel commandPanel;
  private javax.swing.JButton deleteButton;
  private javax.swing.Box.Filler filler1;
  private javax.swing.Box.Filler filler2;
  private javax.swing.JRadioButton formRadio;
  private javax.swing.JPanel interactionPanel;
  private javax.swing.JRadioButton nothingRadio;
  private javax.swing.JPanel previewPanel;
  private javax.swing.JPanel rootPanel;
  // End of variables declaration//GEN-END:variables

  private void loadButtons() {
    int lines = elementBoutons.length,
      columns = elementBoutons[0].length;
    previewPanel.removeAll();
    for (int x = 0; x < lines; x++) {
      for (int y = 0; y < columns; y++) {
        JButton bouton = elementBoutons[x][y];
        GridBagConstraints constraint = new GridBagConstraints();
        constraint.gridx = x;
        constraint.gridy = y;
        SwingUtilities.invokeLater(() -> {
          previewPanel.add(bouton, constraint);
          previewPanel.repaint();
          previewPanel.revalidate();
          addButton.setEnabled(lines < 7);
          deleteButton.setEnabled(lines >= 2);
        });
      }
    }
  }

  private void ajouterElement() {
    int lines = elementBoutons.length;
    int columns = elementBoutons[0].length;
    JButton[][] nouvelElementStructurant = new JButton[lines + 2][lines + 2];
    for (int x = 0; x < lines; x++) {
      for (int y = 0; y < columns; y++) {
        nouvelElementStructurant[x][y] = elementBoutons[x][y];
      }
    }
    for (int x = 0; x <= lines + 1; x++) {
      for (int y = 0; y <= columns + 1; y++) {
        if (nouvelElementStructurant[x][y] == null) {
          JButton button = new JButton();
          button.setCursor(new Cursor(Cursor.HAND_CURSOR));
          button.setBackground(formColor);
          button.setPreferredSize(new Dimension(buttonSize, buttonSize));
          button.setBorder(new LineBorder(previewPanel.getBackground()));
          button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
              JButton it = ((JButton) e.getSource());
              if (formRadio.isSelected()) {
                it.setBackground(formColor);
              } else if (backgroundRadio.isSelected()) {
                it.setBackground(backgroundColor);
              } else if (nothingRadio.isSelected()) {
                it.setBackground(nothingColor);
              }
            }
          });
          nouvelElementStructurant[x][y] = button;
        }
      }
    }
    elementBoutons = nouvelElementStructurant;
    loadButtons();
  }

  private void initElements() {
    elementBoutons = new JButton[1][1];
    JButton button = new JButton();
    button.setCursor(new Cursor(Cursor.HAND_CURSOR));
    button.setBackground(formColor);
    button.setPreferredSize(new Dimension(buttonSize, buttonSize));
    button.setBorder(new LineBorder(previewPanel.getBackground()));
    button.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        JButton it = ((JButton) e.getSource());
        if (formRadio.isSelected()) {
          it.setBackground(formColor);
        } else if (backgroundRadio.isSelected()) {
          it.setBackground(backgroundColor);
        } else if (nothingRadio.isSelected()) {
          it.setBackground(nothingColor);
        }
      }
    });
    elementBoutons[0][0] = button;
  }

  private void enleverElement() {
    int lines = elementBoutons.length;
    if (lines > 1) {
      int columns = elementBoutons[0].length;
      JButton[][] nouvelElementStructurant = new JButton[lines - 2][lines - 2];
      for (int x = 0; x < lines - 2; x++) {
        for (int y = 0; y < columns - 2; y++) {
          nouvelElementStructurant[x][y] = elementBoutons[x][y];
        }
      }
      elementBoutons = nouvelElementStructurant;
    }
    loadButtons();
  }

  public void addOrigineListener(ObserverClass<int[][]> listener) {
    structuringElementListeners.add(listener);
  }

  private void updateOrigineElement(int[][] elementStructurant1) {
    structuringElementListeners.forEach(listener -> listener.callback(elementStructurant1));
  }
}
