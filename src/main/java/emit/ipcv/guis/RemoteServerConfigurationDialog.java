/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emit.ipcv.guis;

import emit.ipcv.dataFormat.DataPacket;
import emit.ipcv.engines.interfaces.observerPatterns.ObservableClass;
import emit.ipcv.engines.interfaces.observerPatterns.ObserverClass;
import emit.ipcv.utils.Const;

import java.awt.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTextField;

/**
 * @author rinelfi
 */
public class RemoteServerConfigurationDialog extends javax.swing.JDialog implements ObservableClass<Map<String, Object>> {
	
	private ObserverClass<Map<String, Object>> observer;
	
	/**
	 * Creates new form RemoteServerConfigurationDialog
	 */
	public RemoteServerConfigurationDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		initValidation();
	}

  public void setIpAddressField(String ipAddressField) {
    this.ipAddressField.setText(ipAddressField);
  }

  public void setPortField(int portField) {
    this.portField.setText(String.valueOf(portField));
  }
	
  public void setDecoder(boolean useLocalHardware) {
    this.useLocalRadioButton.setSelected(useLocalHardware);
    this.useRemoteRadioButton.setSelected(!useLocalHardware);
    initValidation();
  }
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    decoderButton = new javax.swing.ButtonGroup();
    rootPanel = new javax.swing.JPanel();
    buttonPanel = new javax.swing.JPanel();
    testButton = new javax.swing.JButton();
    saveButton = new javax.swing.JButton();
    serverConfigPanel = new javax.swing.JPanel();
    portField = new javax.swing.JTextField();
    useLocalRadioButton = new javax.swing.JRadioButton();
    ipAddressLab = new javax.swing.JLabel();
    portLab = new javax.swing.JLabel();
    ipAddressField = new javax.swing.JTextField();
    useRemoteRadioButton = new javax.swing.JRadioButton();
    messagePanel = new javax.swing.JPanel();
    connectionStateLab = new javax.swing.JLabel();
    executionTimeLab = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Server configuration");
    setResizable(false);
    getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

    rootPanel.setBackground(new java.awt.Color(255, 255, 255));
    rootPanel.setLayout(new java.awt.GridBagLayout());

    buttonPanel.setBackground(new java.awt.Color(255, 255, 255));
    buttonPanel.setLayout(new java.awt.BorderLayout());

    testButton.setText("Test connection");
    testButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        testButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(testButton, java.awt.BorderLayout.WEST);

    saveButton.setText("Apply");
    saveButton.setEnabled(false);
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveButtonActionPerformed(evt);
      }
    });
    buttonPanel.add(saveButton, java.awt.BorderLayout.EAST);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.8;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    rootPanel.add(buttonPanel, gridBagConstraints);

    serverConfigPanel.setBackground(new java.awt.Color(255, 255, 255));
    serverConfigPanel.setLayout(new java.awt.GridBagLayout());

    portField.setText("2046");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 32;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    serverConfigPanel.add(portField, gridBagConstraints);

    decoderButton.add(useLocalRadioButton);
    useLocalRadioButton.setSelected(true);
    useLocalRadioButton.setText("Use the local hardware");
    useLocalRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        useLocalRadioButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    serverConfigPanel.add(useLocalRadioButton, gridBagConstraints);

    ipAddressLab.setText("IP Address");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    serverConfigPanel.add(ipAddressLab, gridBagConstraints);

    portLab.setText("Port");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    serverConfigPanel.add(portLab, gridBagConstraints);

    ipAddressField.setText("127.0.0.1");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 60;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    serverConfigPanel.add(ipAddressField, gridBagConstraints);

    decoderButton.add(useRemoteRadioButton);
    useRemoteRadioButton.setText("Use a remote server");
    useRemoteRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        useRemoteRadioButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 7;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    serverConfigPanel.add(useRemoteRadioButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.8;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    rootPanel.add(serverConfigPanel, gridBagConstraints);

    messagePanel.setBackground(new java.awt.Color(255, 255, 255));
    messagePanel.setLayout(new javax.swing.BoxLayout(messagePanel, javax.swing.BoxLayout.Y_AXIS));

    connectionStateLab.setText("Connection state message");
    messagePanel.add(connectionStateLab);

    executionTimeLab.setText("Execution time");
    messagePanel.add(executionTimeLab);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.8;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    rootPanel.add(messagePanel, gridBagConstraints);

    getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>//GEN-END:initComponents
	
	private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
		executionTimeLab.setText(" ");
		connectionStateLab.setText(" ");
		saveButton.setEnabled(false);
		String ipAddress = ipAddressField.getText();
		String port = portField.getText();
		if (portIsValid()) {
			long currentTime = System.currentTimeMillis();
			try {
				Socket socket = new Socket(InetAddress.getByName(ipAddress), Integer.valueOf(port));
				ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
				DataPacket outputDataPacket = new DataPacket();
				outputDataPacket.setHeader(Const.PING);
				objectOutputStream.writeObject(outputDataPacket);
				objectOutputStream.flush();
				ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
				DataPacket inputDataPacket = (DataPacket) objectInputStream.readObject();
				if (inputDataPacket.getHeader().equals("ping")) {
					connectionStateLab.setForeground(Color.decode("#009900"));
					connectionStateLab.setText("Server connected");
					executionTimeLab.setText("Response time : " + (System.currentTimeMillis() - currentTime) + "ms");
					saveButton.setEnabled(true);
				}
			} catch (IOException | ClassNotFoundException ex) {
				connectionStateLab.setForeground(Color.decode("#FF3333"));
				connectionStateLab.setText(ex.getMessage());
        System.out.println("[WARNING] Host server unreachable\n\tDetail:" + ex.getMessage());
				// Logger.getLogger(RemoteServerConfigurationDialog.class.getName()).log(Level.SEVERE, null, ex);
			}
		} else {
			connectionStateLab.setForeground(Color.decode("#FF3333"));
			connectionStateLab.setText("ip [xxx.xxx.xxx.xxx], port [1024 -> 65000]");
		}
	}//GEN-LAST:event_testButtonActionPerformed
	
	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		Map<String, Object> data = new HashMap<>();
		data.put("use-local-hardware", useLocalRadioButton.isSelected());
		data.put("ip-address", ipAddressField.getText());
		data.put("port", Integer.valueOf(portField.getText()));
		dispose();
		update(data);
	}//GEN-LAST:event_saveButtonActionPerformed

  private void useLocalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useLocalRadioButtonActionPerformed
    initValidation();
  }//GEN-LAST:event_useLocalRadioButtonActionPerformed

  private void useRemoteRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useRemoteRadioButtonActionPerformed
    initValidation();
  }//GEN-LAST:event_useRemoteRadioButtonActionPerformed
	
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JLabel connectionStateLab;
  private javax.swing.ButtonGroup decoderButton;
  private javax.swing.JLabel executionTimeLab;
  private javax.swing.JTextField ipAddressField;
  private javax.swing.JLabel ipAddressLab;
  private javax.swing.JPanel messagePanel;
  private javax.swing.JTextField portField;
  private javax.swing.JLabel portLab;
  private javax.swing.JPanel rootPanel;
  private javax.swing.JButton saveButton;
  private javax.swing.JPanel serverConfigPanel;
  private javax.swing.JButton testButton;
  private javax.swing.JRadioButton useLocalRadioButton;
  private javax.swing.JRadioButton useRemoteRadioButton;
  // End of variables declaration//GEN-END:variables
	
	@Override
	public void addObserver(ObserverClass<Map<String, Object>> observer) {
		this.observer = observer;
	}
	
	@Override
	public void clearObserver() {
	
	}
	
	@Override
	public void update(Map<String, Object> data) {
		this.observer.callback(data);
	}
	
	private boolean portIsValid() {
		String port = portField.getText();
		boolean valide = true;
		if (port.matches("[0-9]{1,5}")) {
			int number = Integer.valueOf(port);
			if (number < 1024 && number > 65000) {
				valide = false;
			}
		} else {
			valide = false;
		}
		return valide;
	}

  private void initValidation() {
    executionTimeLab.setText(" ");
		connectionStateLab.setText(" ");
    ipAddressField.setEnabled(useRemoteRadioButton.isSelected());
    portField.setEnabled(useRemoteRadioButton.isSelected());
    testButton.setEnabled(useRemoteRadioButton.isSelected());
    saveButton.setEnabled(useLocalRadioButton.isSelected());
  }
}
