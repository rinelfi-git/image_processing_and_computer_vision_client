/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emit.ipcv.guis;

import emit.ipcv.database.dao.TranslationDao;
import emit.ipcv.database.dao.entites.DBLanguage;
import emit.ipcv.engines.interfaces.observerPatterns.ObservableClass;
import emit.ipcv.engines.interfaces.observerPatterns.ObserverClass;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author rinelfi
 */
public class ShearDialog extends javax.swing.JDialog implements ObservableClass<float[]> {

  private List<ObserverClass<float[]>> observers;
  private TranslationDao translation;
  private DBLanguage language;

  /**
   * Creates new form HomotetieDialog
   *
   * @param parent
   * @param modal
   */
  public ShearDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    observers = new ArrayList<>();
  }

  public ShearDialog setTranslation(TranslationDao translation) {
    this.translation = translation;
    return this;
  }
  
  public ShearDialog setLanguage(DBLanguage language) {
    this.language = language;
    return this;
  }
  
  public ShearDialog initLanguage() {
    setTitle(translation.get(language, "shear").toString());
    xOffsetLab.setText(translation.get(language, "offset") + " X:");
    yOffsetLab.setText(translation.get(language, "offset") + " Y:");
    confirmButton.setText(translation.get(language, "confirm").toString());
    return this;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    rootPanel = new javax.swing.JPanel();
    xOffsetLab = new javax.swing.JLabel();
    xValueSpin = new javax.swing.JSpinner();
    yOffsetLab = new javax.swing.JLabel();
    yValueSpin = new javax.swing.JSpinner();
    confirmButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Cisaillement");
    setMinimumSize(new java.awt.Dimension(200, 110));
    setPreferredSize(new java.awt.Dimension(200, 110));
    setResizable(false);

    rootPanel.setBackground(new java.awt.Color(255, 255, 255));
    rootPanel.setLayout(new java.awt.GridBagLayout());

    xOffsetLab.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    xOffsetLab.setText("Décalage X:");
    xOffsetLab.setMaximumSize(new java.awt.Dimension(80, 15));
    xOffsetLab.setMinimumSize(new java.awt.Dimension(80, 15));
    xOffsetLab.setPreferredSize(new java.awt.Dimension(80, 15));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 5, 4, 5);
    rootPanel.add(xOffsetLab, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
    rootPanel.add(xValueSpin, gridBagConstraints);

    yOffsetLab.setText("Décalage Y:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(4, 5, 4, 5);
    rootPanel.add(yOffsetLab, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
    rootPanel.add(yValueSpin, gridBagConstraints);

    confirmButton.setText("Confirmer");
    confirmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        confirmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    rootPanel.add(confirmButton, gridBagConstraints);

    getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>//GEN-END:initComponents

  private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
    dispose();
    update(new float[]{Float.valueOf(xValueSpin.getValue().toString()), Float.valueOf(yValueSpin.getValue().toString())});
  }//GEN-LAST:event_confirmButtonActionPerformed

  @Override
  public void addObserver(ObserverClass<float[]> observer) {
    observers.add(observer);
  }

  @Override
  public void clearObserver() {
    observers = new ArrayList<>();
  }

  @Override
  public void update(float[] data) {
    observers.forEach(observer -> observer.callback(data));
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton confirmButton;
  private javax.swing.JPanel rootPanel;
  private javax.swing.JLabel xOffsetLab;
  private javax.swing.JSpinner xValueSpin;
  private javax.swing.JLabel yOffsetLab;
  private javax.swing.JSpinner yValueSpin;
  // End of variables declaration//GEN-END:variables
}
