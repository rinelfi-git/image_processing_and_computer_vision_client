/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emit.ipcv.guis;

import emit.ipcv.database.dao.TranslationDao;
import emit.ipcv.database.dao.entites.DBLanguage;
import emit.ipcv.engines.interfaces.observerPatterns.ObservableClass;
import emit.ipcv.engines.interfaces.observerPatterns.ObserverClass;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JSlider;

/**
 *
 * @author rinelfi
 */
public class DynamicDisplayDialog extends javax.swing.JDialog implements ObservableClass<int[]> {

  private List<ObserverClass<int[]>> observers;
  private TranslationDao translation;
  private DBLanguage language;
  /**
   * Creates new form DynamicDisplayDialog
   */
  public DynamicDisplayDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    observers = new ArrayList<>();
  }
  
  public DynamicDisplayDialog setTranslation(TranslationDao translation) {
    this.translation = translation;
    return this;
  }
  
  public DynamicDisplayDialog setLanguage(DBLanguage language) {
    this.language = language;
    return this;
  }
  
  public DynamicDisplayDialog initLanguage() {
    setTitle(translation.get(language, "dynamic_display").toString());
    confirmButton.setText(translation.get(language, "confirm").toString());
    return this;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    rootPanel = new javax.swing.JPanel();
    minSpin = new javax.swing.JSpinner();
    maxSpin = new javax.swing.JSpinner();
    minSlide = new javax.swing.JSlider();
    maxSlide = new javax.swing.JSlider();
    confirmButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Etalage de la dynamique");

    rootPanel.setBackground(new java.awt.Color(255, 255, 255));
    rootPanel.setLayout(new java.awt.GridBagLayout());

    minSpin.setMinimumSize(new java.awt.Dimension(70, 25));
    minSpin.setPreferredSize(new java.awt.Dimension(70, 25));
    minSpin.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        minSpinStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(9, 5, 3, 5);
    rootPanel.add(minSpin, gridBagConstraints);

    maxSpin.setMinimumSize(new java.awt.Dimension(70, 25));
    maxSpin.setPreferredSize(new java.awt.Dimension(70, 25));
    maxSpin.setValue(255);
    maxSpin.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        maxSpinStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.insets = new java.awt.Insets(4, 5, 5, 5);
    rootPanel.add(maxSpin, gridBagConstraints);

    minSlide.setMaximum(254);
    minSlide.setValue(0);
    minSlide.setMinimumSize(new java.awt.Dimension(300, 16));
    minSlide.setPreferredSize(new java.awt.Dimension(300, 16));
    minSlide.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        minSlideStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(8, 8, 1, 1);
    rootPanel.add(minSlide, gridBagConstraints);

    maxSlide.setMaximum(255);
    maxSlide.setMinimum(1);
    maxSlide.setValue(255);
    maxSlide.setMinimumSize(new java.awt.Dimension(300, 16));
    maxSlide.setPreferredSize(new java.awt.Dimension(300, 16));
    maxSlide.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        maxSlideStateChanged(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.insets = new java.awt.Insets(1, 8, 1, 1);
    rootPanel.add(maxSlide, gridBagConstraints);

    confirmButton.setText("Confirmer");
    confirmButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        confirmButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
    gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 7);
    rootPanel.add(confirmButton, gridBagConstraints);

    getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>//GEN-END:initComponents

  private void maxSlideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSlideStateChanged
    maxSpin.setValue(((JSlider)(evt.getSource())).getValue());
    minSlide.setMaximum(((JSlider)(evt.getSource())).getValue() - 1);
  }//GEN-LAST:event_maxSlideStateChanged

  private void minSlideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minSlideStateChanged
    minSpin.setValue(((JSlider)(evt.getSource())).getValue());
    maxSlide.setMinimum(((JSlider)(evt.getSource())).getValue() + 1);
  }//GEN-LAST:event_minSlideStateChanged

  private void minSpinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minSpinStateChanged
    int value = Integer.valueOf(minSpin.getValue().toString());
    if(value >= minSlide.getMinimum() && value <= minSlide.getMaximum()){
      minSlide.setValue(value);
    }else if(value < minSlide.getMinimum()) {
      minSpin.setValue(minSlide.getMinimum());
    } else if(value > minSlide.getMaximum()) {
      minSpin.setValue(minSlide.getMaximum());
    }
  }//GEN-LAST:event_minSpinStateChanged

  private void maxSpinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSpinStateChanged
    int value = Integer.valueOf(maxSpin.getValue().toString());
    if(value >= maxSlide.getMinimum() && value <= maxSlide.getMaximum()){
      maxSlide.setValue(value);
    }else if(value < maxSlide.getMinimum()) {
      maxSpin.setValue(maxSlide.getMinimum());
    } else if(value > maxSlide.getMaximum()) {
      maxSpin.setValue(maxSlide.getMaximum());
    }
  }//GEN-LAST:event_maxSpinStateChanged

  private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
    dispose();
    update(new int[]{minSlide.getValue(), maxSlide.getValue()});
  }//GEN-LAST:event_confirmButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton confirmButton;
  private javax.swing.JSlider maxSlide;
  private javax.swing.JSpinner maxSpin;
  private javax.swing.JSlider minSlide;
  private javax.swing.JSpinner minSpin;
  private javax.swing.JPanel rootPanel;
  // End of variables declaration//GEN-END:variables

  @Override
  public void addObserver(ObserverClass<int[]> observer) {
    observers.add(observer);
  }

  @Override
  public void clearObserver() {
    observers.clear();
  }

  @Override
  public void update(int[] data) {
    observers.forEach(observer -> {
      observer.callback(data);
    });
  }
}
