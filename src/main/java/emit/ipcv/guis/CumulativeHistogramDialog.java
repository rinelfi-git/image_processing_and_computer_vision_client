/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emit.ipcv.guis;

import emit.ipcv.database.dao.TranslationDao;
import emit.ipcv.database.dao.entites.DBLanguage;
import emit.ipcv.utils.ImageLoader;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import javax.swing.JPanel;
import org.knowm.xchart.CategoryChart;
import org.knowm.xchart.CategoryChartBuilder;
import org.knowm.xchart.CategorySeries;
import org.knowm.xchart.XChartPanel;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.Styler;

/**
 *
 * @author rinelfi
 */
public class CumulativeHistogramDialog extends javax.swing.JDialog {

  private ImageLoader imageHelper;
  private int[] histogram;
  private CategoryChart chart;
  private JPanel chartPanel;
  private int minIndex, maxIndex;
  private TranslationDao translation;
  private DBLanguage language;

  /**
   * Creates new form Histogramme
   */
  public CumulativeHistogramDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    minIndex = 0;
    maxIndex = 19;
  }
  
  public CumulativeHistogramDialog setTranslation(TranslationDao translation) {
    this.translation = translation;
    return this;
  }
  
  public CumulativeHistogramDialog setLanguage(DBLanguage language) {
    this.language = language;
    return this;
  }

  public ImageLoader getImageHelper() {
    return imageHelper;
  }

  public void setImageHelper(ImageLoader imageHelper) {
    this.imageHelper = imageHelper;
  }

  private double[][] getPartialDataSet() {
    // create bar chart 
    double[] color = new double[maxIndex - minIndex + 1], occurence = new double[maxIndex - minIndex + 1];
    for (int i = minIndex, c = 0; i <= maxIndex; i++, c++) {
      color[c] = i;
      occurence[c] = histogram[i];
    }
    return new double[][]{color, occurence};
  }

  private double[][] getFullDataSet() {
    // create bar chart 
    double[] color = new double[histogram.length], occurence = new double[histogram.length];
    for (int i = 0; i < histogram.length; i++) {
      color[i] = i;
      occurence[i] = histogram[i];
    }
    return new double[][]{color, occurence};
  }

  public void loadPartialChart() {
    double[][] data = getPartialDataSet();
    chart = new CategoryChartBuilder().title(translation.get(language, "cumulative_histogram").toString()).xAxisTitle("Niveau").yAxisTitle("Couleurs").build();
    chart.getStyler().setToolTipsEnabled(true);
    chart.getStyler().setChartBackgroundColor(Color.WHITE);
    chart.getStyler().setLegendPosition(Styler.LegendPosition.InsideN);
    chart.getStyler().setDefaultSeriesRenderStyle(CategorySeries.CategorySeriesRenderStyle.Bar);

    chart.addSeries(translation.get(language, "histogram").toString(), data[0], data[1]);
    chartPanel = new XChartPanel(chart);
    rootPanel.add(chartPanel, BorderLayout.CENTER);
    rootPanel.validate();          // refresh panel to display new chart
    chartPanel.addMouseWheelListener(new MouseWheelListener() {
      @Override
      public void mouseWheelMoved(MouseWheelEvent e) {
        int rotation = e.getWheelRotation();
        if ((minIndex - 1 >= 0 && rotation < 0) || (maxIndex + 1 < histogram.length && rotation > 0)) {
          minIndex += e.getWheelRotation();
          maxIndex += e.getWheelRotation();
        }
        double[][] data = getPartialDataSet();
        chart.updateCategorySeries(translation.get(language, "histogram").toString(), data[0], data[1], null);
        chartPanel.repaint();
      }
    });
  }

  public void loadFullChart() {
    double[][] data = getFullDataSet();
    XYChart fullChart = new XYChartBuilder().build();
    fullChart.getStyler().setToolTipsEnabled(true);
    fullChart.getStyler().setChartBackgroundColor(Color.WHITE);
    fullChart.getStyler().setLegendPosition(Styler.LegendPosition.OutsideE);
    fullChart.getStyler().setDefaultSeriesRenderStyle(XYSeries.XYSeriesRenderStyle.Area);
    fullChart.getStyler().setAxisTicksVisible(false);

    fullChart.addSeries(translation.get(language, "global_preview").toString(), data[0], data[1]);
    JPanel fullChartPanel = new XChartPanel(fullChart);
    miniMap.add(fullChartPanel, BorderLayout.CENTER);
    miniMap.validate();
  }

  public void setHistogram(int[] histogram) {
    this.histogram = histogram;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    rootPanel = new javax.swing.JPanel();
    miniMap = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Histogramme");
    setMinimumSize(new java.awt.Dimension(860, 570));

    rootPanel.setBackground(new java.awt.Color(255, 255, 255));
    rootPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
        rootPanelMouseWheelMoved(evt);
      }
    });
    rootPanel.setLayout(new java.awt.BorderLayout());

    miniMap.setBackground(new java.awt.Color(255, 255, 255));
    miniMap.setMinimumSize(new java.awt.Dimension(76, 150));
    miniMap.setPreferredSize(new java.awt.Dimension(76, 150));
    miniMap.setLayout(new java.awt.BorderLayout());
    rootPanel.add(miniMap, java.awt.BorderLayout.PAGE_START);

    getContentPane().add(rootPanel, java.awt.BorderLayout.CENTER);

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>//GEN-END:initComponents

  private void rootPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_rootPanelMouseWheelMoved
    // TODO add your handling code here:
  }//GEN-LAST:event_rootPanelMouseWheelMoved

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel miniMap;
  private javax.swing.JPanel rootPanel;
  // End of variables declaration//GEN-END:variables
}
